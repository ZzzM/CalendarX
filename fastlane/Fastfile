default_platform(:mac)

platform :mac do
  
  before_all do
    ENV["APP_NAME"] = "CalendarX"
    ENV["APP_TAG_NAME"] = last_git_tag
    ENV["APP_BUILD"] = "#{number_of_commits}"
    ENV["SYS_MIN_VERSION"] = "11.0.0"
    ENV["BUILD_PATH"] = "./build"
    ENV["LOG_PATH"] = ENV["BUILD_PATH"] + "/TMP.md"
    ENV["DMG_PATH"] = ENV["BUILD_PATH"] + "/#{ENV["APP_NAME"]}.dmg"
  end

  lane :create_dmg do
    setup
    sh("echo APP_NAME=#{ENV["APP_NAME"]} >> $GITHUB_ENV")
    sh("echo APP_TAG_NAME=#{ENV["APP_TAG_NAME"]} >> $GITHUB_ENV")
    sh("echo APP_RELEASE_NAME=#{ENV["APP_RELEASE_NAME"]} >> $GITHUB_ENV")
    sh("echo LOG_PATH=#{ENV["LOG_PATH"]} >> $GITHUB_ENV")
    sh("echo DMG_PATH=#{ENV["DMG_PATH"]} >> $GITHUB_ENV")

    build
    clean
    sh "cd .. && zsh ./scripts/create_dmg.sh"
  end

  private_lane :setup do

    path = ENV["APP_NAME"] + "/Info.plist"
    ENV["APP_VERSION"] = format_version.first
    ENV["APP_VERSION_NAME"] = format_version.join(' ')
    ENV["APP_RELEASE_NAME"] = "#{ENV["APP_NAME"]} #{ENV["APP_VERSION_NAME"]}"

    set_info_plist_value(path: path, key: "AppVersionName", value: ENV["APP_VERSION_NAME"])
    increment_build_number_in_xcodeproj(build_number: ENV["APP_BUILD"])
    increment_version_number_in_xcodeproj(version_number: ENV["APP_VERSION"])

  end

  private_lane :build do 

    build_mac_app(
      clean: true,
      silent: true,
      scheme: ENV["APP_NAME"],
      export_method: "mac-application",
      output_directory: ENV["BUILD_PATH"])
      
  end

  private_lane :clean do
    sh "rm -vfr ~/Library/Developer/Xcode/Archives/*"
  end


  # TEST
  lane :test do |options|
    setup
    build
    clean

    UI.header("#{ENV["APP_NAME"]} #{ENV["APP_TAG_NAME"]} build #{ENV["APP_BUILD"]}")

    result = UI.select("Release the app now?", ["No", "Yes"])
    case result
    when "No"
      UI.message("The app is debugging...")
      sh "cd .. && zsh ./scripts/test.sh debug"
    when "Yes"
      UI.message("The app is Releasing...")
      sh "cd .. && zsh ./scripts/test.sh release"
    end
  end
  
  lane :release do |options|

    release_name = ENV["APP_RELEASE_NAME"]
    tag_name = ENV["APP_TAG_NAME"]

    repo = options[:repo]
    token = options[:token]

    log_path = "../" + ENV["LOG_PATH"]
    dmg_path = ENV["DMG_PATH"] 

    is_prerelease = tag_name.include?('beta')

    set_github_release(
      repository_name: repo,
      api_token: token,
      name: release_name,
      tag_name: tag_name,
      description: (File.read(log_path) rescue "No changelog provided"),
      is_prerelease: is_prerelease,
      upload_assets: [dmg_path])
      
  end

  lane :show do
    sh "cd .. && zsh ./scripts/test.sh t2"
  end

  private_lane :format_version do
    if last_git_tag =~ /^v?(\d+\.\d+\.\d+)-([\w\.]+)$/
      # 匹配带后缀的版本号，例如 1.0.0-beta.1 或 v1.0.0-beta.1
      main_version = $1
      suffix = $2.split('.').map do |part|
        part.downcase == "rc" ? part.upcase : part.capitalize
      end.join(' ') # 将 "." 替换为空格，特殊处理 RC
      [main_version, suffix]
    elsif last_git_tag =~ /^v?(\d+\.\d+\.\d+)$/
      # 匹配纯版本号，例如 1.0.0 或 v1.0.0
      [$1]
    else
      # 不符合规则，返回原字符串的单元素数组
      [last_git_tag]
    end
  end

end
